# main.py - Sistema de Inscripci√≥n y Admisi√≥n ULEAM
# Sistema interactivo para ingresar datos manualmente

from models.universidad import Universidad
from models.sede import Sede
from models.periodo import Periodo
from models.oferta_academica import OfertaAcademica
from models.postulante import Postulante
from models.datos_personales import DatosPersonales
from models.inscripcion import Inscripcion
from models.evaluacion import Evaluacion
from models.administrador import Administrador

def limpiar_pantalla():
    """Limpia la pantalla de la consola"""
    import os
    os.system('cls' if os.name == 'nt' else 'clear')

def pausar():
    """Pausa la ejecuci√≥n hasta que el usuario presione Enter"""
    input("\nPresione Enter para continuar...")

def mostrar_menu_principal():
    """Muestra el men√∫ principal del sistema"""
    print("\n" + "="*60)
    print("üéì SISTEMA DE INSCRIPCI√ìN Y ADMISI√ìN - ULEAM")
    print("="*60)
    print("\n1. Gestionar Universidad")
    print("2. Gestionar Postulantes")
    print("3. Gestionar Inscripciones")
    print("4. Gestionar Evaluaciones")
    print("5. Consultas y Reportes")
    print("6. Salir")
    print("\n" + "-"*60)

def crear_universidad():
    """Crea y configura la universidad"""
    print("\nüìå CONFIGURACI√ìN DE LA UNIVERSIDAD")
    print("-" * 60)
    
    nombre = input("Ingrese el nombre de la universidad: ")
    universidad = Universidad(nombre)
    
    print(f"\n‚úÖ Universidad '{nombre}' creada exitosamente.")
    
    # Agregar sedes
    print("\n¬øDesea agregar sedes? (s/n): ", end="")
    if input().lower() == 's':
        agregar_sedes(universidad)
    
    # Agregar periodo acad√©mico
    print("\n¬øDesea crear el periodo acad√©mico? (s/n): ", end="")
    if input().lower() == 's':
        agregar_periodo(universidad)
    
    # Agregar ofertas acad√©micas
    print("\n¬øDesea agregar ofertas acad√©micas? (s/n): ", end="")
    if input().lower() == 's':
        agregar_ofertas(universidad)
    
    return universidad

def agregar_sedes(universidad):
    """Agrega sedes a la universidad"""
    print("\nüìç AGREGAR SEDES")
    print("-" * 60)
    
    while True:
        print("\n--- Nueva Sede ---")
        nombre = input("Nombre de la sede: ")
        direccion = input("Direcci√≥n: ")
        ciudad = input("Ciudad: ")
        capacidad = int(input("Capacidad: "))
        
        sede = Sede(nombre, direccion, ciudad, capacidad)
        universidad.agregar_sede(sede)
        
        print("\n¬øDesea agregar otra sede? (s/n): ", end="")
        if input().lower() != 's':
            break

def agregar_periodo(universidad):
    """Crea y agrega un periodo acad√©mico"""
    print("\nüìÖ CREAR PERIODO ACAD√âMICO")
    print("-" * 60)
    
    id_periodo = input("ID del periodo (ej: 2025-2): ")
    nombre = input("Nombre del periodo (ej: Segundo Periodo 2025): ")
    estado = input("Estado (ACTIVO/INACTIVO): ").upper()
    fecha_inicio = input("Fecha de inicio (dd/mm/aaaa): ")
    fecha_fin = input("Fecha de fin (dd/mm/aaaa): ")
    
    periodo = Periodo(id_periodo, nombre, estado, fecha_inicio, fecha_fin)
    universidad.Crear_Periodo(periodo)
    
    return periodo

def agregar_ofertas(universidad):
    """Agrega ofertas acad√©micas"""
    print("\nüìö AGREGAR OFERTAS ACAD√âMICAS")
    print("-" * 60)
    
    while True:
        print("\n--- Nueva Oferta ---")
        id_oferta = input("ID de oferta (ej: OFA001): ")
        nombre_carrera = input("Nombre de la carrera: ").upper()
        capacidad = int(input("Capacidad de cupos: "))
        estado = input("Estado (ABIERTO/CERRADO): ").upper()
        
        oferta = OfertaAcademica(id_oferta, nombre_carrera, capacidad, estado)
        universidad.Oferta_Academica(oferta)
        
        print("\n¬øDesea agregar otra oferta? (s/n): ", end="")
        if input().lower() != 's':
            break

def crear_postulante():
    """Crea un nuevo postulante con sus datos personales"""
    print("\nüë§ REGISTRO DE NUEVO POSTULANTE")
    print("-" * 60)
    
    # Datos de usuario
    print("\n--- Datos de Usuario ---")
    nombre = input("Nombre completo: ")
    usuario = input("Nombre de usuario: ")
    correo = input("Correo electr√≥nico: ")
    clave = input("Contrase√±a: ")
    
    # Datos personales
    print("\n--- Datos Personales ---")
    nombres = input("Nombres: ")
    apellidos = input("Apellidos: ")
    cedula = input("C√©dula: ")
    direccion = input("Direcci√≥n: ")
    celular = input("Celular: ")
    etnia = input("Etnia: ")
    
    print("¬øTiene discapacidad? (SI/NO): ", end="")
    discapacidad = input().upper()
    
    # Crear objetos
    datos = DatosPersonales(nombres, apellidos, cedula, direccion, 
                           celular, correo, etnia, discapacidad)
    
    postulante = Postulante(nombre, usuario, correo, clave)
    postulante._datos_personales = datos  # Asignar datos personales
    
    print(f"\n‚úÖ Postulante '{nombre}' registrado exitosamente.")
    print(f"   Usuario: {usuario}")
    print(f"   C√©dula: {cedula}")
    
    return postulante

def crear_inscripcion(postulante, universidad):
    """Crea una inscripci√≥n para un postulante"""
    print("\nüìù CREAR INSCRIPCI√ìN")
    print("-" * 60)
    
    # Verificar que haya periodos disponibles
    if not universidad._periodos:
        print("\n‚ùå No hay periodos acad√©micos disponibles.")
        print("   Debe crear un periodo primero.")
        return None
    
    # Mostrar periodos disponibles
    print("\nPeriodos disponibles:")
    for i, periodo in enumerate(universidad._periodos, 1):
        print(f"{i}. {periodo}")
    
    opcion_periodo = int(input("\nSeleccione el periodo: ")) - 1
    periodo = universidad._periodos[opcion_periodo]
    
    # Datos de inscripci√≥n
    id_inscripcion = input("\nID de inscripci√≥n (ej: INS-2025-001): ")
    fecha = input("Fecha de inscripci√≥n (dd/mm/aaaa): ")
    
    print("\nModalidad:")
    print("1. Matutino")
    print("2. Vespertino")
    opcion_modalidad = input("Seleccione: ")
    modalidad = "Matutino" if opcion_modalidad == "1" else "Vespertino"
    
    # Crear inscripci√≥n
    inscripcion = Inscripcion(id_inscripcion, fecha, modalidad, periodo)
    inscripcion._postulante = postulante  # Asignar postulante
    
    # Seleccionar carreras (m√°ximo 3 prioridades)
    print("\nüìö Selecci√≥n de Carreras (m√°ximo 3 prioridades)")
    
    if not universidad._ofertas_academicas:
        print("\n‚ùå No hay ofertas acad√©micas disponibles.")
        return inscripcion
    
    print("\nOfertas disponibles:")
    for i, oferta in enumerate(universidad._ofertas_academicas, 1):
        print(f"{i}. {oferta.Consultar_Cupos()}")
    
    prioridades = []
    for prioridad in range(1, 4):
        print(f"\n--- Prioridad {prioridad} ---")
        print("0. No seleccionar m√°s carreras")
        opcion = int(input(f"Seleccione carrera para prioridad {prioridad}: "))
        
        if opcion == 0:
            break
        
        oferta = universidad._ofertas_academicas[opcion - 1]
        prioridades.append({
            'prioridad': prioridad,
            'oferta': oferta,
            'id_oferta': oferta._id_oferta
        })
        print(f"‚úÖ {oferta._nombre_carrera} seleccionada como prioridad {prioridad}")
    
    inscripcion._prioridades = prioridades
    inscripcion.Crear_Inscripcion()
    
    # Agregar al postulante
    if not hasattr(postulante, '_inscripciones'):
        postulante._inscripciones = []
    postulante._inscripciones.append(inscripcion)
    
    return inscripcion

def crear_evaluacion(postulante, universidad):
    """Crea una evaluaci√≥n para un postulante"""
    print("\nüìã PROGRAMAR EVALUACI√ìN")
    print("-" * 60)
    
    id_evaluacion = input("ID de evaluaci√≥n (ej: EVAL-2025-001): ")
    fecha = input("Fecha de evaluaci√≥n (dd/mm/aaaa): ")
    hora = input("Hora (HH:MM): ")
    
    print("\nTipo de evaluaci√≥n:")
    print("1. Presencial")
    print("2. Virtual")
    opcion_tipo = input("Seleccione: ")
    tipo = "Presencial" if opcion_tipo == "1" else "Virtual"
    
    lugar = ""
    if tipo == "Presencial":
        if universidad._sedes:
            print("\nSedes disponibles:")
            for i, sede in enumerate(universidad._sedes, 1):
                print(f"{i}. {sede.Consultar_Sede()}")
            
            opcion_sede = int(input("\nSeleccione sede: ")) - 1
            sede = universidad._sedes[opcion_sede]
            lugar = sede._nombre
        else:
            lugar = input("Lugar: ")
    else:
        lugar = "Plataforma Virtual"
    
    # Crear evaluaci√≥n
    evaluacion = Evaluacion(id_evaluacion, fecha, hora, lugar, tipo)
    evaluacion._postulante = postulante  # Asignar postulante
    
    evaluacion.Programar()
    
    # Agregar al postulante
    if not hasattr(postulante, '_evaluaciones'):
        postulante._evaluaciones = []
    postulante._evaluaciones.append(evaluacion)
    
    return evaluacion

def mostrar_consultas(postulantes, universidad):
    """Muestra men√∫ de consultas y reportes"""
    while True:
        print("\nüìä CONSULTAS Y REPORTES")
        print("-" * 60)
        print("1. Listar todos los postulantes")
        print("2. Ver inscripciones de un postulante")
        print("3. Ver evaluaciones de un postulante")
        print("4. Ver ofertas acad√©micas disponibles")
        print("5. Ver informaci√≥n de la universidad")
        print("6. Volver al men√∫ principal")
        
        opcion = input("\nSeleccione una opci√≥n: ")
        
        if opcion == "1":
            listar_postulantes(postulantes)
        elif opcion == "2":
            ver_inscripciones_postulante(postulantes)
        elif opcion == "3":
            ver_evaluaciones_postulante(postulantes)
        elif opcion == "4":
            ver_ofertas(universidad)
        elif opcion == "5":
            ver_info_universidad(universidad)
        elif opcion == "6":
            break
        
        pausar()

def listar_postulantes(postulantes):
    """Lista todos los postulantes registrados"""
    print("\nüë• POSTULANTES REGISTRADOS")
    print("-" * 60)
    
    if not postulantes:
        print("No hay postulantes registrados.")
        return
    
    for i, postulante in enumerate(postulantes, 1):
        print(f"\n{i}. {postulante.mostrar_informacion()}")

def ver_inscripciones_postulante(postulantes):
    """Muestra las inscripciones de un postulante"""
    if not postulantes:
        print("\n‚ùå No hay postulantes registrados.")
        return
    
    print("\nPostulantes:")
    for i, p in enumerate(postulantes, 1):
        print(f"{i}. {p._nombre} ({p._usuario})")
    
    opcion = int(input("\nSeleccione postulante: ")) - 1
    postulante = postulantes[opcion]
    
    print(f"\nüìù Inscripciones de {postulante._nombre}")
    print("-" * 60)
    
    if hasattr(postulante, '_inscripciones') and postulante._inscripciones:
        for insc in postulante._inscripciones:
            print(f"\n{insc.Consultar()}")
            if hasattr(insc, '_prioridades') and insc._prioridades:
                print("   Carreras seleccionadas:")
                for p in insc._prioridades:
                    print(f"      {p['prioridad']}. {p['oferta']._nombre_carrera}")
    else:
        print("No tiene inscripciones registradas.")

def ver_evaluaciones_postulante(postulantes):
    """Muestra las evaluaciones de un postulante"""
    if not postulantes:
        print("\n‚ùå No hay postulantes registrados.")
        return
    
    print("\nPostulantes:")
    for i, p in enumerate(postulantes, 1):
        print(f"{i}. {p._nombre} ({p._usuario})")
    
    opcion = int(input("\nSeleccione postulante: ")) - 1
    postulante = postulantes[opcion]
    
    print(f"\nüìã Evaluaciones de {postulante._nombre}")
    print("-" * 60)
    
    if hasattr(postulante, '_evaluaciones') and postulante._evaluaciones:
        for ev in postulante._evaluaciones:
            print(f"\n{ev.Consultar()}")
    else:
        print("No tiene evaluaciones programadas.")

def ver_ofertas(universidad):
    """Muestra todas las ofertas acad√©micas"""
    print("\nüìö OFERTAS ACAD√âMICAS")
    print("-" * 60)
    
    if not universidad._ofertas_academicas:
        print("No hay ofertas acad√©micas registradas.")
        return
    
    for oferta in universidad._ofertas_academicas:
        print(f"\n‚Ä¢ {oferta.Consultar_Cupos()}")

def ver_info_universidad(universidad):
    """Muestra informaci√≥n general de la universidad"""
    print("\nüèõÔ∏è  INFORMACI√ìN DE LA UNIVERSIDAD")
    print("-" * 60)
    print(f"Nombre: {universidad._nombre}")
    print(f"Sedes: {len(universidad._sedes)}")
    print(f"Ofertas Acad√©micas: {len(universidad._ofertas_academicas)}")
    print(f"Periodos Acad√©micos: {len(universidad._periodos)}")

def main():
    """Funci√≥n principal del sistema"""
    universidad = None
    postulantes = []
    
    print("\n¬°Bienvenido al Sistema de Inscripci√≥n y Admisi√≥n ULEAM!")
    pausar()
    
    while True:
        limpiar_pantalla()
        mostrar_menu_principal()
        
        opcion = input("Seleccione una opci√≥n: ")
        
        if opcion == "1":
            # Gestionar Universidad
            if universidad is None:
                universidad = crear_universidad()
            else:
                print("\n‚ö†Ô∏è  Ya existe una universidad configurada.")
                print("¬øDesea reconfigurarla? (s/n): ", end="")
                if input().lower() == 's':
                    universidad = crear_universidad()
            pausar()
        
        elif opcion == "2":
            # Gestionar Postulantes
            postulante = crear_postulante()
            postulantes.append(postulante)
            pausar()
        
        elif opcion == "3":
            # Gestionar Inscripciones
            if not postulantes:
                print("\n‚ùå Debe registrar postulantes primero.")
            elif universidad is None:
                print("\n‚ùå Debe configurar la universidad primero.")
            else:
                print("\nPostulantes disponibles:")
                for i, p in enumerate(postulantes, 1):
                    print(f"{i}. {p._nombre} ({p._usuario})")
                
                opcion_post = int(input("\nSeleccione postulante: ")) - 1
                crear_inscripcion(postulantes[opcion_post], universidad)
            pausar()
        
        elif opcion == "4":
            # Gestionar Evaluaciones
            if not postulantes:
                print("\n‚ùå Debe registrar postulantes primero.")
            elif universidad is None:
                print("\n‚ùå Debe configurar la universidad primero.")
            else:
                print("\nPostulantes disponibles:")
                for i, p in enumerate(postulantes, 1):
                    print(f"{i}. {p._nombre} ({p._usuario})")
                
                opcion_post = int(input("\nSeleccione postulante: ")) - 1
                crear_evaluacion(postulantes[opcion_post], universidad)
            pausar()
        
        elif opcion == "5":
            # Consultas y Reportes
            if universidad is None:
                print("\n‚ùå Debe configurar la universidad primero.")
                pausar()
            else:
                mostrar_consultas(postulantes, universidad)
        
        elif opcion == "6":
            # Salir
            print("\n¬°Gracias por usar el sistema!")
            print("Hasta pronto. üëã")
            break
        
        else:
            print("\n‚ùå Opci√≥n inv√°lida. Intente nuevamente.")
            pausar()

if __name__ == "__main__":
    main()
